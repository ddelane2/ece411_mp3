import lc3b_types::*;

module mp3
(
    input clk,

    /* Memory signals */
    input pmem_resp,
    input [127:0] pmem_rdata,
    output pmem_read,
    output pmem_write,
    output lc3b_word pmem_address,
    output [127:0] pmem_wdata
);
//**********************************************
/* Internal Signals */
lc3b_mem_wmask mem_byte_enable;
logic mem_read, mem_write;
lc3b_word mem_address, mem_wdata, mem_rdata;
logic mem_resp;

/* Top Level Blocks */

cache cache_unit
(
   .clk,

    //Signals between CPU and Cache
   .mem_read(mem_read), 
	.mem_write(mem_write),								//read/write signals
	.mem_byte_enable(mem_byte_enable), 				//mask saying which byte(s) to write to
	.mem_address(mem_address),			//address from cpu
   .mem_wdata(mem_wdata),  				//data from data bus to cache
	.mem_rdata(mem_rdata),				//data from cache to data bus
	.mem_resp(mem_resp),
	
	//Signals between Cache and Main Memory
	.pmem_resp(pmem_resp),										//signal indicating physical memory has finished operation
	.pmem_rdata(pmem_rdata),									//data read from memory
	.pmem_wdata(pmem_wdata),									//data to be written to memory
	.pmem_read(pmem_read),										//read signal (to memory)
	.pmem_write(pmem_write),						 			//write signal (to memory)
	.pmem_address(pmem_address)								//address for memory

);


CPU CPU_unit
(
    .clk,
    /* Memory signals */
    .mem_resp(mem_resp),
    .mem_rdata(mem_rdata),
    .mem_read(mem_read),
    .mem_write(mem_write),
    .mem_byte_enable(mem_byte_enable),
    .mem_address(mem_address),
    .mem_wdata(mem_wdata)

);


endmodule : mp3
